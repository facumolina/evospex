#!/bin/bash

# Important: Set EVOSPEX_TEST_GEN environment variable to the root directory of this repo first! 

# Set if not enough memory
# maxmem=-Xmx8G

if [ -z ${EVOSPEX_TEST_GEN+x} ]; then 
    echo "Error: EVOSPEX_TEST_GEN environment variable must be set before executing $0"
    exit -1
fi

if [ "$#" -lt 4 ]; then
    echo "Error: Illegal number of parameters"
    echo "Usage: $0 <project_classpath> <main_class> <regex_method> <scope> <deps...>?"
    exit -1
fi


project_classpath=$1
main_class=$2
regex_method=$3
scope=$4

test_classes="--testclass=$main_class"
for var in "${@:5}"; do
    test_classes+=" --testclass=$var"
done

deps=""
for var in "${@:5}"; do
    deps+=" $var"
done

mutator_dir=$EVOSPEX_TEST_GEN
pushd $EVOSPEX_TEST_GEN > /dev/null

results_log=log.txt
echo "> Executing: $@" > $results_log
echo "> Results for project classpath: $project_classpath, class: $main_class, method: $regex_method, scope: $scope" >> $results_log

# Variables with fixed values
randoop_jar=$mutator_dir/lib/randoop-all-4.3.0.jar
mutator_inputs=$mutator_dir/inputs
mutator_outputs=$mutator_dir/outputs
mutator_tmp=$mutator_dir/tmp
outdir_tests=$mutator_dir/tests

echo "> Main class: $main_class"
package=${main_class%.*}
class=${main_class##*.}
echo "> Method regex: $regex_method"
echo "> Scope: $scope"
echo "> Dependencies: $deps"

echo ""
mkdir -p $mutator_inputs
echo "> Going to generate objects via test gen in: $mutator_inputs"
echo "  > Cleaning up old objects: $mutator_inputs"
rm $mutator_inputs/*

echo ""
mkdir -p $mutator_outputs
echo "> Going to generate mutated objects in: $mutator_outputs"
echo "  > Cleaning up old mutated objects: $mutator_outputs"
rm $mutator_outputs/*

echo ""
mkdir -p $mutator_tmp
echo "> Temporary directory for generation of mutated objects: $mutator_tmp"
echo "  > Cleaning up old temporary files: $mutator_tmp"
rm $mutator_tmp/*

echo ""
mkdir -p $outdir_tests
echo "> Going to generate JUnit tests in: $outdir_tests"
echo "  > Cleaning up old tests: $outdir_tests"
rm -r $outdir_tests/*

# IMPORTANT: Test generation fixed values
timelimit=60
literals=${mutator_dir}/literals/literals${scope}.txt
canprop=${mutator_dir}/properties/scope${scope}.canonicalizer.properties

# Ignore methods that are known to not work well with be generation
omitmethods="toString|hashCode|equals|clone|compareTo|javax.swing.*|ASTNode.dump|ASTNode.getTree|ASTNode.display|ASTNode.createTree|dk.statsbiblioteket.summa.common.util.PriorityQueue.getComparator|java.lang.Iterable.forEach|java.lang.Iterable.spliterator|java.util.List.spliterator|java.util.Collection.stream|java.util.AbstractList.subList|java.util.List.sort|jahuwaldt.plot.LinearAxisScale.findGoodLimits"
# END OF IMPORTANT: Test generation values

echo ""
echo "> Executing test generation with Randoop"
cmd="java -ea $maxmem -cp ${randoop_jar}:${project_classpath} randoop.main.Main gentests $test_classes --serialize-folder=$mutator_inputs --serialize-method=\"$regex_method\" --junit-package-name=$package --junit-output-dir=$outdir_tests --time-limit=$timelimit --literals-level=ALL --literals-file=$literals --omit-methods=\"$omitmethods\" --forbid-null=true"

echo -e "\n\n> Executing: $cmd" >> $results_log
bash -c "$cmd" >> $results_log 2>> $results_log

echo ""
echo "> Randoop finished!"

echo ""
echo "> Starting generation of negative structures"


#mutator_bin=${mutator_dir}/build/classes/java/main
mutator_bin=${mutator_dir}/lib/mutate-objects.jar
canonicalizer_jar=${mutator_dir}/lib/heapcanonicalizer-2.0.jar
# Compute number of input parameters for the method (nuber of inXX.xml files generated by BE)
numinputs=$(ls $mutator_inputs | grep in | wc -l)
# Compute number of output parameters for the method (nuber of outXX.xml files generated by BE)
numoutputs=$(ls $mutator_inputs | grep out | wc -l)
# Number of iterations over the input (positive) objects to produce output (negative) objects
mutationIts=3

logging=""
cmd="java -ea $maxmem $logging -cp $canonicalizer_jar:$randoop_jar:$mutator_bin:${project_classpath} mutator.MutateInOutObjects \"$main_class\" \"$canprop\" $numinputs $numoutputs $mutationIts swapReceivers"

echo -e "\n\n> Executing: $cmd" >> $results_log
bash -c "$cmd" 2>> $results_log

echo ""
echo "> Negative structures generation finished!"

popd > /dev/null

echo ""
echo "> Finished!"


